{"version":3,"sources":["webpack://unityrtc-web-client/./source/index.ts","webpack://unityrtc-web-client/./source/bridge.ts","webpack://unityrtc-web-client/./source/common.types.ts","webpack://unityrtc-web-client/./source/peer.ts","webpack://unityrtc-web-client/./source/socket.ts","webpack://unityrtc-web-client/webpack/bootstrap"],"names":["_hostChange","host","window","UNITY","hostChange","_otherjoin","id","peers","_socketsend","Leave","createOffer","_offer","from","offer","handleOffer","_answer","answer","handleAnswer","_candidate","candidate","handleCandidate","target","url","exec","location","href","this","socket","on","SocketTypes","Join","HostChange","Offer","Answer","Candidate","send","bind","Send","to","message","channels","Broadcast","peer","Create","room","password","type","Connect","Start","Farwell","Bridge","SocketErrorType","remote","close","configuration","iceServers","urls","pc","RTCPeerConnection","webkitRTCPeerConnection","connection","onicecandidate","event","peerID","onicegatheringstatechange","console","log","onicecandidateerror","error","errorText","oniceconnectionstatechange","evt","onconnectionstatechange","ConnectionStateChange","ondatachannel","onDataChannel","channelSchema","kill","label","channel","Function","disconnect","connectionUpdate","connectionState","setUpChannel","onmessage","onChannelMessage","onerror","onChannelError","onopen","onChannelOpen","onclose","onChannelClose","queue","createChannel","name","createDataChannel","length","channelUpdate","data","c","then","setLocalDescription","alert","desription","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","handleLeave","Object","keys","readyState","push","Peer","events","ws","WebSocket","callback","Array","fire","forEach","cb","params","msg","JSON","stringify","parse","Error","JoinAnswer","setID","Socket","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","RTC","state","peer_id"],"mappings":"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","file":"client.js","sourcesContent":["import Bridge from './bridge';\n\ndeclare global {\n  interface Window { \n    RTC: Bridge; \n    UNITY: {\n      connectionUpdate: (id:string, state:RTCPeerConnectionState) => void;\n      channelUpdate: (label:string, state:RTCPeerConnectionState) => void;\n      message: (channel:string, peer_id:string, msg:string) => void;\n      error: (type:string, peer_id:string, error:string) => void;\n      disconnect: (peer_id:string) => void;\n      hostChange: (host:string) => void;\n      setID: (id:string) => void;\n    },\n    peerID:string;\n    host:string;\n  }\n}\n\nwindow.RTC = new Bridge();\n\nwindow.UNITY = {\n  connectionUpdate: (id, state) => {\n    console.log(\"state update\", id, state);\n  },\n  message: (channel, peer_id, msg) => {\n    console.log(`new message from ${peer_id} on ${channel}: ${msg}`);\n  },\n  error: (type, peer_id, error) => {\n    console.log(\"oh no, error!\", peer_id, type, error);\n  },\n  channelUpdate: (label, state) => {\n    console.log(\"new update for channel\", label, state);\n  },\n  disconnect: (peer_id) => {\n    console.log(\"peer disonnect\", peer_id);\n  },\n  hostChange: (host) => {\n    console.log('new host', host);\n  },\n  setID: (id) => {\n    console.log('ID set', id);\n  }\n};\n","import { \n  SocketMessageAnswer,\n  SocketMessageCandidate,\n  SocketMessageOffer,\n  SocketMessageJoin,\n  SocketMessageHostChange,\n\n  SocketRequestCreate,\n  SocketRequestJoin,\n  SocketTypes,\n} from './common.types';\nimport { SendFunction } from './types';\n\nimport Peer from './peer';\nimport Socket from './socket';\n\nclass Bridge {\n  socket:Socket;\n  id:string|null;\n  peers: {[key:string]:Peer};\n  _socketsend:SendFunction;\n\n  constructor() {\n    const url = /http(.*)/.exec(window.location.href) || [\"\", \"ERROR.url-split.error\"];\n    this.socket = new Socket(`ws${url[1]}`);\n    this.peers = {};\n    this.id = null;\n\n    this.socket.on(SocketTypes.Join, this._otherjoin);\n    this.socket.on(SocketTypes.HostChange, this._hostChange);\n    this.socket.on(SocketTypes.Offer, this._offer);\n    this.socket.on(SocketTypes.Answer, this._answer);\n    this.socket.on(SocketTypes.Candidate, this._candidate);\n\n    this._socketsend = this.socket.send.bind(this.socket);\n  }\n\n  _hostChange = ({ host } : SocketMessageHostChange) => {\n    window.host = host;\n    window.UNITY.hostChange(host);\n  }\n  _otherjoin = ({ id } : SocketMessageJoin) => {\n    if (!this.peers[id])\n      this.peers[id] = new Peer(this._socketsend, id, this.Leave);\n    this.peers[id].createOffer(this._socketsend, this.id as string);\n  }\n  _offer = ({ from, offer } : SocketMessageOffer) => {\n    if (!this.peers[from])\n      this.peers[from] = new Peer(this._socketsend, from, this.Leave);\n    this.peers[from].handleOffer(this._socketsend, offer);\n  }\n  _answer = ({ from, answer } : SocketMessageAnswer) => this.peers[from].handleAnswer(answer);\n  _candidate = ({ from, candidate } : SocketMessageCandidate) => {\n    if (!this.peers[from])\n      this.peers[from] = new Peer(this._socketsend, from, this.Leave);\n    this.peers[from].handleCandidate(candidate);\n  }\n\n\n  Send(to:string, message:string, channels:string|string[]) {\n    if (!this.peers[to]) return false;\n\n    this.peers[to].send(message, channels);\n    return true;\n  }\n  Broadcast(message:string, channels:string|string[]) {\n    for (const peer in this.peers) {\n      this.peers[peer].send(message, channels);\n    }\n  }\n  Leave = (target:string) => {\n    delete this.peers[target];\n  }\n  \n  Create(room:string, password:string) {\n    this.socket.send({ type: SocketTypes.Create, room, password } as SocketRequestCreate);\n  }\n\n  Connect(room:string, password:string) {\n    this.socket.send({ type: SocketTypes.Join, room, password } as SocketRequestJoin);\n  }\n\n  Start() {\n    this.socket.send({ type: SocketTypes.Farwell });\n  }\n}\n\nexport default Bridge;","export enum SocketTypes {\n  Create = \"room\",\n  Connect = \"connect\",\n  Join = \"join\",\n  JoinAnswer = 'join-answer',\n  HostChange = \"host-change\",\n  Leave = \"leave\",\n  Error = \"error\",\n  Farwell = \"farwell\",\n\n  Candidate = 'candidate',\n  Offer = 'offer',\n  Answer = 'answer'\n}\n\nexport enum SocketErrorType {\n  Room = \"room\",\n  Join = \"join\",\n  Host = 'host',\n}\n\nexport interface SocketMessage {\n  type:SocketTypes;\n};\n\n//#region request messages\n// can add whatever to it now\nexport interface SocketRequestMessage extends SocketMessage {\n  from:string|null\n}\n\nexport interface SocketRequestCreate extends SocketMessage {\n  room:string,\n  password?:string\n}\n\nexport interface SocketRequestJoin extends SocketRequestCreate {}\n\nexport interface SocketRequestLeave extends SocketRequestMessage {}\n\n\nexport interface SocketP2PRequest extends SocketRequestMessage {\n  to:string;\n}\n\nexport interface SocketRequestCandidate extends SocketP2PRequest {\n  candidate:RTCIceCandidateInit\n}\n\nexport interface SocketRequestOffer extends SocketP2PRequest {\n  offer: RTCSessionDescriptionInit\n}\n\nexport interface SocketRequestAnswer extends SocketP2PRequest {\n  answer:RTCSessionDescriptionInit\n}\n//#endregion\n\n//#region incoming messages\nexport interface SocketMessageJoin extends SocketMessage {\n  id:string;\n}\n\nexport interface SocketMessageHostChange extends SocketMessage {\n  host:string;\n}\n\nexport interface SocketMessageCreate extends SocketMessage {\n  id:string;\n}\n\nexport interface SocketMessageJoinAnswer extends SocketMessage {\n  id:string;\n  host:string;\n}\n\nexport interface SocketMessageLeave extends SocketMessage {\n  id:string;\n}\n\nexport interface SocketMessageError extends SocketMessage {\n  error:SocketErrorType;\n  message:string;\n}\n\nexport interface SocketMessageP2P extends SocketMessage {\n  from: string;\n}\n\nexport interface SocketMessageCandidate extends SocketMessageP2P {\n  candidate:RTCIceCandidateInit\n}\n\nexport interface SocketMessageOffer extends SocketMessageP2P {\n  offer: RTCSessionDescriptionInit\n}\n\nexport interface SocketMessageAnswer extends SocketMessageP2P {\n  answer:RTCSessionDescriptionInit\n}\n//#endregion\n","import { \n  SocketRequestAnswer, \n  SocketRequestCandidate, \n  SocketRequestOffer, \n\n  SocketTypes\n} from './common.types';\nimport { SendFunction } from './types';\n\ninterface Channel {\n  channel:RTCDataChannel,\n  queue:string[],\n}\n\nclass Peer {\n  remote:string;\n  channelSchema:[string];\n  connection:webkitRTCPeerConnection;\n  channels:{[key:string]:Channel};\n  close:Function;\n\n  constructor(send:SendFunction, remote:string, close:Function, channels:[string] = [\"default\"]) {\n    const configuration = {\n      iceServers: [\n        { urls: \"stun:stun.l.google.com:19302\" },\n        { urls: \"stun:stun1.l.google.com:19302\" },\n      ],\n    };\n\n    let pc:RTCPeerConnection = null;\n    if (window.RTCPeerConnection) {\n      pc = new RTCPeerConnection(configuration);\n    }\n    else {\n      pc = new webkitRTCPeerConnection(configuration);\n    }\n\n    this.connection = pc;\n    // setup ice-handeling\n    pc.onicecandidate = (event) => {\n      if (event.candidate) {\n        send({\n          type: SocketTypes.Candidate,\n          candidate: event.candidate,\n          to: this.remote,\n          from: window.peerID\n        } as SocketRequestCandidate);\n      }\n    };\n    pc.onicegatheringstatechange = () => {\n      console.log(\"ICE gathering state\");\n    };\n    pc.onicecandidateerror = (error) =>\n      window.UNITY.error(\"ice\", this.remote, error.errorText);\n\n    pc.oniceconnectionstatechange = (evt) => {\n      console.log(\"ICE state change\", evt);\n    };\n\n    pc.onconnectionstatechange = this.ConnectionStateChange.bind(this);\n    pc.ondatachannel = this.onDataChannel.bind(this);\n\n    this.remote = remote;\n    this.channelSchema = channels;\n    this.channels = {};\n    this.close = close;\n    this.kill = this.kill.bind(this);\n  }\n\n  kill() {\n    for (const label in this.channels) {\n      if (this.channels[label].channel?.close instanceof Function)\n        this.channels[label].channel.close();\n    }\n\n    this.connection.close();\n    window.UNITY.disconnect(this.remote);\n    this.close(this.remote);\n  }\n\n  ConnectionStateChange() {\n    // must exist\n    window.UNITY.connectionUpdate(this.remote, this.connection.connectionState);\n\n    switch (this.connection.connectionState) {\n      case \"closed\":\n      case \"disconnected\":\n      case \"failed\":\n        this.kill();\n        break;\n    }\n  }\n\n  onDataChannel(event: RTCDataChannelEvent) {\n    const channel = event.channel;\n    this.setUpChannel(channel);\n  }\n\n  setUpChannel(channel:RTCDataChannel) {\n    channel.onmessage = (event) => this.onChannelMessage(channel.label, event);\n    channel.onerror = (error) => this.onChannelError(channel.label, error);\n    channel.onopen = () => this.onChannelOpen(channel.label);\n    channel.onclose = (event) => this.onChannelClose(channel.label, event);\n\n    console.log(\"incomming channel:\", channel.label);\n    this.channels[channel.label] = {\n      channel,\n      queue: [],\n    };\n  }\n\n  createChannel(name:string) {\n    const channel = this.connection.createDataChannel(name);\n    this.setUpChannel(channel);\n  }\n\n  onChannelOpen(label:string) {\n    console.log('channel now open')\n    if (this.channels[label].queue.length > 0) {\n      // sending all messages in queue\n      console.log(\"rensing queue\", label, this.channels[label].queue.length);\n      for (const message of this.channels[label].queue) {\n        this.send(message, label);\n      }\n      this.channels[label].queue = [];\n    }\n  }\n\n  onChannelClose(label:string, event:Event) {\n    console.log(\"channel is closed\", label, event.type);\n    window.UNITY.channelUpdate(label, \"closed\");\n  }\n\n  onChannelMessage(name:string, event: MessageEvent) {\n    window.UNITY.message(name, this.remote, event.data);\n  }\n\n  onChannelError(name:string, event:RTCErrorEvent) {\n    console.log('channel error', name)\n    window.UNITY.error(\"channel\", name, event.error.message);\n  }\n\n  createOffer(send:SendFunction, from:string) {\n    for (const c of this.channelSchema) {\n      this.createChannel(c);\n    }\n\n    return this.connection\n      .createOffer()\n      .then((offer) => {\n        send({ type: SocketTypes.Offer, to: from, from: window.peerID, offer } as SocketRequestOffer);\n\n        this.connection.setLocalDescription(offer);\n      })\n      .catch((error) => {\n        console.error(\"offer-error\", error);\n        alert(\"Error when creating an offer\");\n      });\n  }\n\n  handleOffer(send:SendFunction, desription:RTCSessionDescriptionInit) {\n    // we are connecting\n    this.connection.setRemoteDescription(new RTCSessionDescription(desription));\n\n    // creating and sending an answer to the offer\n    return this.connection\n      .createAnswer()\n      .then((answer) => {\n        this.connection.setLocalDescription(answer);\n\n        send({ type: SocketTypes.Answer, answer, to: this.remote, from: window.peerID } as SocketRequestAnswer);\n      })\n      .catch((error) => {\n        console.error(\"answer-error\", error);\n        alert(\"Error when creating an answer\");\n      });\n  }\n\n  handleAnswer(desription:RTCSessionDescriptionInit) {\n    this.connection.setRemoteDescription(new RTCSessionDescription(desription));\n  }\n\n  handleCandidate(candidate:RTCIceCandidateInit) {\n    console.log(\"handle-candidate\", this.connection, candidate);\n    this.connection.addIceCandidate(new RTCIceCandidate(candidate));\n  }\n\n  handleLeave() {\n    this.connection.close();\n    this.connection.onicecandidate = null;\n    this.close();\n  }\n\n  send(message:string, channels:string[]|string) {\n    if (typeof channels === \"string\") {\n      channels = [channels];\n    }\n    if (!channels) {\n      channels = Object.keys(this.channels);\n    }\n\n    // console.log(\"sending message\", message, channels);\n\n    for (const label of channels) {\n      if (this.channels[label].channel.readyState === \"open\") {\n        this.channels[label].channel.send(message);\n      } else {\n        // store if for later\n        console.log('not open yet');\n        this.channels[label].queue.push(message);\n      }\n    }\n  }\n}\n\nexport default Peer;\n","import { \n  SocketMessage,\n  SocketMessageError,\n  SocketTypes,\n  SocketMessageLeave,\n  SocketMessageJoinAnswer,\n} from './common.types';\nimport { SocketEvents } from './types';\n\nclass Socket {\n  ws:WebSocket;\n  events:SocketEvents;\n\n  constructor(url:string) {\n    this.events = {};\n\n    this.ws = new WebSocket(url);\n    this.ws.onmessage = this.message.bind(this);\n  }\n\n  on(event:string, callback:Function) {\n    if (!this.events[event]) this.events[event] = new Array<Function>();\n\n    this.events[event].push(callback);\n  }\n\n  fire(event:string, ...params:[any]) {\n    if (this.events[event]) this.events[event].forEach((cb) => cb(...params));\n  }\n\n  send(data:SocketMessage) {\n    const msg = JSON.stringify(data);\n    this.ws.send(msg);\n  }\n\n  error({ error, message } : SocketMessageError) {\n    this.fire(\"error-\" + error, message);\n  }\n\n  message(msg:MessageEvent) {\n    const data = JSON.parse(msg.data) as SocketMessage;\n\n    if (this.events[data.type]) {\n      this.fire(data.type, data);\n    }\n\n    switch (data.type) {\n      case SocketTypes.Error:\n        return this.error(data as SocketMessageError);\n      case SocketTypes.Leave: {\n        const { id } = data as SocketMessageLeave;\n        window.UNITY.disconnect(id);\n        break;\n      }\n      case SocketTypes.JoinAnswer: {\n        const { id, host } = data as SocketMessageJoinAnswer;\n        window.peerID = id;\n        window.host = host;\n        window.UNITY.hostChange(host);\n        window.UNITY.setID(id);\n        break;\n      }\n      case SocketTypes.Farwell:\n        console.log(\"[SOCKET] Goodbye, thats it! out and fly child!\");\n        this.ws.close();\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport default Socket;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"sourceRoot":""}